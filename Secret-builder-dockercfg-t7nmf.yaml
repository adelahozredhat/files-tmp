apiVersion: v1
data:
    .dockercfg: eyIxMC4yMTcuNS4xMTU6NTAwMCI6eyJ1c2VybmFtZSI6InNlcnZpY2VhY2NvdW50IiwicGFzc3dvcmQiOiJleUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SWtwaFVYRnBRbmxTT0VwSlFtcDFlbFJLTjNoUlNXeFBZa2R6YzJSc1ZqRmFZWGwxT0daWlUwNHlkM2NpZlEuZXlKcGMzTWlPaUpyZFdKbGNtNWxkR1Z6TDNObGNuWnBZMlZoWTJOdmRXNTBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5dVlXMWxjM0JoWTJVaU9pSmhZWEFpTENKcmRXSmxjbTVsZEdWekxtbHZMM05sY25acFkyVmhZMk52ZFc1MEwzTmxZM0psZEM1dVlXMWxJam9pWW5WcGJHUmxjaTEwYjJ0bGJpMWlaR1kwYWlJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZ5ZG1salpTMWhZMk52ZFc1MExtNWhiV1VpT2lKaWRXbHNaR1Z5SWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXpaWEoyYVdObExXRmpZMjkxYm5RdWRXbGtJam9pWWpCbFkyRm1Oell0TTJWbFpTMDBNVEZpTFdKaU5XRXRZVFUwTkdNd05tTmtaVFpsSWl3aWMzVmlJam9pYzNsemRHVnRPbk5sY25acFkyVmhZMk52ZFc1ME9tRmhjRHBpZFdsc1pHVnlJbjAuWGtCRFJRYTNYVElDaFg4QlBQQ1NNX0ZrNm9hcXFZVzRWWHNNQWgxeHptVzFuc3NzaFhFTEk3cVdudThvSWhXQnJMVGRaYmQ1T0hZQUxmUUNlYS1BWVp5MzZ5RW1SWjctdk9MbXMxakx4aGQ1bkROaHBEVDBUQk5zRXpGb1BkNnpwVWVFX1FsTGgwS25JWjBGXzNDaDhMazVOTmdtXzJBMGRjMTRFR2RLaW1jajMyVzJMbEtDM0RLTlNTQzdSVUhtRnhuZElTYlAtRXNHOWgtdFE0WUtVV3BLWDZ5UDNMMkVHYnhWYnlQRlFPa2R4bFljR0h1dzJMN0RBY1ppX2JUWklSdUs2bG1HSjZOdVJ5Vk1hV3d4d3BfT2FqVmtCcVhmb1R3VjlsMHY3TlBPYVVfRWNvNkdPMlNNVE5BUzF2SGc1TC1yem1ZX1JiUG5WZ3BET016bDd6MGFPN19hOU1kOEZrR3pZYWZmcWo5T1BtbmZnVndZLWhwMVpiMk9fQTZDQjM3b1dHemxneUpvMElaMkJOaHVyQ05rbTdGbk9Qd1FQT3M3ZV9DMVRmeUZCY1RhM0pwVUZrLVZVQTduX3l0dUhlZ3BmZ1Fyb1hveGxUTXNfaEZiYV9mN0k0ejdmQnAzb2Nwc3BPOFU0WTA4c1h3dG5tMGRqa1AzY2RILWdiZ1BleEdzYnJWdmVhLXA0cWpZeXZPdFdUVkNpczd5aHk1V2pDSVZBYU1NNFpjdEM5YlJJR0ZVVzJxVzY3LW9VOGc2b1UtT05NRTdUWTlac1FxOTNMU3ktUExCTThyUGMxX01iTjdMMFZUSVpkeW5zdkZKbGtUWEdSSWNUbDVvNHdQclRRQWptN2JHS3JBcXFoVXNBZmxtSWlzcDlybHpNRVVUa0pxZ2Q3Zk5PYVEiLCJlbWFpbCI6InNlcnZpY2VhY2NvdW50QGV4YW1wbGUub3JnIiwiYXV0aCI6ImMyVnlkbWxqWldGalkyOTFiblE2WlhsS2FHSkhZMmxQYVVwVFZYcEpNVTVwU1hOSmJYUndXa05KTmtscmNHaFZXRVp3VVc1c1UwOUZjRXBSYlhBeFpXeFNTMDR6YUZKVFYzaFFXV3RrZW1NeVVuTldha1poV1Zoc01VOUhXbHBWTURSNVpETmphV1pSTG1WNVNuQmpNMDFwVDJsS2NtUlhTbXhqYlRWc1pFZFdla3d6VG14amJscHdXVEpXYUZreVRuWmtWelV3U1dsM2FXRXpWbWxhV0VwMVdsaFNiR041TlhCaWVUbDZXbGhLTW1GWFRteFpWMDVxWWpOV2RXUkRPWFZaVnpGc1l6TkNhRmt5VldsUGFVcG9XVmhCYVV4RFNuSmtWMHBzWTIwMWJHUkhWbnBNYld4MlRETk9iR051V25CWk1sWm9XVEpPZG1SWE5UQk1NMDVzV1ROS2JHUkROWFZaVnpGc1NXcHZhVmx1Vm5CaVIxSnNZMmt4TUdJeWRHeGlhVEZwV2tkWk1HRnBTWE5KYlhReFdXMVdlV0p0VmpCYVdFMTFZVmM0ZG1NeVZubGtiV3hxV2xkR2Fsa3lPVEZpYmxGMll6SldlV1J0YkdwYVV6Rm9XVEpPZG1SWE5UQk1iVFZvWWxkVmFVOXBTbWxrVjJ4eldrZFdlVWxwZDJsaE0xWnBXbGhLZFZwWVVteGplVFZ3WW5rNWVscFlTakpoVjA1c1dWZE9hbUl6Vm5Wa1F6bDZXbGhLTW1GWFRteE1WMFpxV1RJNU1XSnVVWFZrVjJ4clNXcHZhVmxxUW14Wk1rWnRUbnBaZEUweVZteGFVekF3VFZSR2FVeFhTbWxPVjBWMFdWUlZNRTVIVFhkT2JVNXJXbFJhYkVscGQybGpNMVpwU1dwdmFXTXpiSHBrUjFaMFQyNU9iR051V25CWk1sWm9XVEpPZG1SWE5UQlBiVVpvWTBSd2FXUlhiSE5hUjFaNVNXNHdMbGhyUWtSU1VXRXpXRlJKUTJoWU9FSlFVRU5UVFY5R2F6WnZZWEZ4V1ZjMFZsaHpUVUZvTVhoNmJWY3hibk56YzJoWVJVeEpOM0ZYYm5VNGIwbG9WMEp5VEZSa1dtSmtOVTlJV1VGTVpsRkRaV0V0UVZsYWVUTTJlVVZ0VWxvM0xYWlBURzF6TVdwTWVHaGtOVzVFVG1od1JGUXdWRUpPYzBWNlJtOVFaRFo2Y0ZWbFJWOVJiRXhvTUV0dVNWb3dSbDh6UTJnNFRHczFUazVuYlY4eVFUQmtZekUwUlVka1MybHRZMm96TWxjeVRHeExRek5FUzA1VFUwTTNVbFZJYlVaNGJtUkpVMkpRTFVWelJ6bG9MWFJSTkZsTFZWZHdTMWcyZVZBelRESkZSMko0Vm1KNVVFWlJUMnRrZUd4WlkwZElkWGN5VERkRVFXTmFhVjlpVkZwSlVuVkxObXh0UjBvMlRuVlNlVlpOWVZkM2VIZHdYMDloYWxaclFuRllabTlVZDFZNWJEQjJOMDVRVDJGVlgwVmpielpIVHpKVFRWUk9RVk14ZGtobk5Vd3RjbnB0V1Y5U1lsQnVWbWR3UkU5TmVtdzNlakJoVHpkZllUbE5aRGhHYTBkNldXRm1abkZxT1U5UWJXNW1aMVozV1Mxb2NERmFZakpQWDBFMlEwSXpOMjlYUjNwc1ozbEtiekJKV2pKQ1RtaDFja05PYTIwM1JtNVBVSGRSVUU5ek4yVmZRekZVWm5sR1FtTlVZVE5LY0ZWR2F5MVdWVUUzYmw5NWRIVklaV2R3Wm1kUmNtOVliM2hzVkUxelgyaEdZbUZmWmpkSk5IbzNaa0p3TTI5amNITndUemhWTkZrd09ITllkM1J1YlRCa2FtdFFNMk5rU0MxblltZFFaWGhIYzJKeVZuWmxZUzF3TkhGcVdYbDJUM1JYVkZaRGFYTTNlV2g1TlZkcVEwbFdRV0ZOVFRSYVkzUkRPV0pTU1VkR1ZWY3ljVmMyTnkxdlZUaG5ObTlWTFU5T1RVVTNWRms1V25OUmNUa3pURk41TFZCTVFrMDRjbEJqTVY5TllrNDNUREJXVkVsYVpIbHVjM1pHU214clZGaEhVa2xqVkd3MWJ6UjNVSEpVVVVGcWJUZGlSMHR5UVhGeGFGVnpRV1pzYlVscGMzQTVjbXg2VFVWVlZHdEtjV2RrTjJaT1QyRlIifSwiZGVmYXVsdC1yb3V0ZS1vcGVuc2hpZnQtaW1hZ2UtcmVnaXN0cnkuYXBwcy1jcmMudGVzdGluZyI6eyJ1c2VybmFtZSI6InNlcnZpY2VhY2NvdW50IiwicGFzc3dvcmQiOiJleUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SWtwaFVYRnBRbmxTT0VwSlFtcDFlbFJLTjNoUlNXeFBZa2R6YzJSc1ZqRmFZWGwxT0daWlUwNHlkM2NpZlEuZXlKcGMzTWlPaUpyZFdKbGNtNWxkR1Z6TDNObGNuWnBZMlZoWTJOdmRXNTBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5dVlXMWxjM0JoWTJVaU9pSmhZWEFpTENKcmRXSmxjbTVsZEdWekxtbHZMM05sY25acFkyVmhZMk52ZFc1MEwzTmxZM0psZEM1dVlXMWxJam9pWW5WcGJHUmxjaTEwYjJ0bGJpMWlaR1kwYWlJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZ5ZG1salpTMWhZMk52ZFc1MExtNWhiV1VpT2lKaWRXbHNaR1Z5SWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXpaWEoyYVdObExXRmpZMjkxYm5RdWRXbGtJam9pWWpCbFkyRm1Oell0TTJWbFpTMDBNVEZpTFdKaU5XRXRZVFUwTkdNd05tTmtaVFpsSWl3aWMzVmlJam9pYzNsemRHVnRPbk5sY25acFkyVmhZMk52ZFc1ME9tRmhjRHBpZFdsc1pHVnlJbjAuWGtCRFJRYTNYVElDaFg4QlBQQ1NNX0ZrNm9hcXFZVzRWWHNNQWgxeHptVzFuc3NzaFhFTEk3cVdudThvSWhXQnJMVGRaYmQ1T0hZQUxmUUNlYS1BWVp5MzZ5RW1SWjctdk9MbXMxakx4aGQ1bkROaHBEVDBUQk5zRXpGb1BkNnpwVWVFX1FsTGgwS25JWjBGXzNDaDhMazVOTmdtXzJBMGRjMTRFR2RLaW1jajMyVzJMbEtDM0RLTlNTQzdSVUhtRnhuZElTYlAtRXNHOWgtdFE0WUtVV3BLWDZ5UDNMMkVHYnhWYnlQRlFPa2R4bFljR0h1dzJMN0RBY1ppX2JUWklSdUs2bG1HSjZOdVJ5Vk1hV3d4d3BfT2FqVmtCcVhmb1R3VjlsMHY3TlBPYVVfRWNvNkdPMlNNVE5BUzF2SGc1TC1yem1ZX1JiUG5WZ3BET016bDd6MGFPN19hOU1kOEZrR3pZYWZmcWo5T1BtbmZnVndZLWhwMVpiMk9fQTZDQjM3b1dHemxneUpvMElaMkJOaHVyQ05rbTdGbk9Qd1FQT3M3ZV9DMVRmeUZCY1RhM0pwVUZrLVZVQTduX3l0dUhlZ3BmZ1Fyb1hveGxUTXNfaEZiYV9mN0k0ejdmQnAzb2Nwc3BPOFU0WTA4c1h3dG5tMGRqa1AzY2RILWdiZ1BleEdzYnJWdmVhLXA0cWpZeXZPdFdUVkNpczd5aHk1V2pDSVZBYU1NNFpjdEM5YlJJR0ZVVzJxVzY3LW9VOGc2b1UtT05NRTdUWTlac1FxOTNMU3ktUExCTThyUGMxX01iTjdMMFZUSVpkeW5zdkZKbGtUWEdSSWNUbDVvNHdQclRRQWptN2JHS3JBcXFoVXNBZmxtSWlzcDlybHpNRVVUa0pxZ2Q3Zk5PYVEiLCJlbWFpbCI6InNlcnZpY2VhY2NvdW50QGV4YW1wbGUub3JnIiwiYXV0aCI6ImMyVnlkbWxqWldGalkyOTFiblE2WlhsS2FHSkhZMmxQYVVwVFZYcEpNVTVwU1hOSmJYUndXa05KTmtscmNHaFZXRVp3VVc1c1UwOUZjRXBSYlhBeFpXeFNTMDR6YUZKVFYzaFFXV3RrZW1NeVVuTldha1poV1Zoc01VOUhXbHBWTURSNVpETmphV1pSTG1WNVNuQmpNMDFwVDJsS2NtUlhTbXhqYlRWc1pFZFdla3d6VG14amJscHdXVEpXYUZreVRuWmtWelV3U1dsM2FXRXpWbWxhV0VwMVdsaFNiR041TlhCaWVUbDZXbGhLTW1GWFRteFpWMDVxWWpOV2RXUkRPWFZaVnpGc1l6TkNhRmt5VldsUGFVcG9XVmhCYVV4RFNuSmtWMHBzWTIwMWJHUkhWbnBNYld4MlRETk9iR051V25CWk1sWm9XVEpPZG1SWE5UQk1NMDVzV1ROS2JHUkROWFZaVnpGc1NXcHZhVmx1Vm5CaVIxSnNZMmt4TUdJeWRHeGlhVEZwV2tkWk1HRnBTWE5KYlhReFdXMVdlV0p0VmpCYVdFMTFZVmM0ZG1NeVZubGtiV3hxV2xkR2Fsa3lPVEZpYmxGMll6SldlV1J0YkdwYVV6Rm9XVEpPZG1SWE5UQk1iVFZvWWxkVmFVOXBTbWxrVjJ4eldrZFdlVWxwZDJsaE0xWnBXbGhLZFZwWVVteGplVFZ3WW5rNWVscFlTakpoVjA1c1dWZE9hbUl6Vm5Wa1F6bDZXbGhLTW1GWFRteE1WMFpxV1RJNU1XSnVVWFZrVjJ4clNXcHZhVmxxUW14Wk1rWnRUbnBaZEUweVZteGFVekF3VFZSR2FVeFhTbWxPVjBWMFdWUlZNRTVIVFhkT2JVNXJXbFJhYkVscGQybGpNMVpwU1dwdmFXTXpiSHBrUjFaMFQyNU9iR051V25CWk1sWm9XVEpPZG1SWE5UQlBiVVpvWTBSd2FXUlhiSE5hUjFaNVNXNHdMbGhyUWtSU1VXRXpXRlJKUTJoWU9FSlFVRU5UVFY5R2F6WnZZWEZ4V1ZjMFZsaHpUVUZvTVhoNmJWY3hibk56YzJoWVJVeEpOM0ZYYm5VNGIwbG9WMEp5VEZSa1dtSmtOVTlJV1VGTVpsRkRaV0V0UVZsYWVUTTJlVVZ0VWxvM0xYWlBURzF6TVdwTWVHaGtOVzVFVG1od1JGUXdWRUpPYzBWNlJtOVFaRFo2Y0ZWbFJWOVJiRXhvTUV0dVNWb3dSbDh6UTJnNFRHczFUazVuYlY4eVFUQmtZekUwUlVka1MybHRZMm96TWxjeVRHeExRek5FUzA1VFUwTTNVbFZJYlVaNGJtUkpVMkpRTFVWelJ6bG9MWFJSTkZsTFZWZHdTMWcyZVZBelRESkZSMko0Vm1KNVVFWlJUMnRrZUd4WlkwZElkWGN5VERkRVFXTmFhVjlpVkZwSlVuVkxObXh0UjBvMlRuVlNlVlpOWVZkM2VIZHdYMDloYWxaclFuRllabTlVZDFZNWJEQjJOMDVRVDJGVlgwVmpielpIVHpKVFRWUk9RVk14ZGtobk5Vd3RjbnB0V1Y5U1lsQnVWbWR3UkU5TmVtdzNlakJoVHpkZllUbE5aRGhHYTBkNldXRm1abkZxT1U5UWJXNW1aMVozV1Mxb2NERmFZakpQWDBFMlEwSXpOMjlYUjNwc1ozbEtiekJKV2pKQ1RtaDFja05PYTIwM1JtNVBVSGRSVUU5ek4yVmZRekZVWm5sR1FtTlVZVE5LY0ZWR2F5MVdWVUUzYmw5NWRIVklaV2R3Wm1kUmNtOVliM2hzVkUxelgyaEdZbUZmWmpkSk5IbzNaa0p3TTI5amNITndUemhWTkZrd09ITllkM1J1YlRCa2FtdFFNMk5rU0MxblltZFFaWGhIYzJKeVZuWmxZUzF3TkhGcVdYbDJUM1JYVkZaRGFYTTNlV2g1TlZkcVEwbFdRV0ZOVFRSYVkzUkRPV0pTU1VkR1ZWY3ljVmMyTnkxdlZUaG5ObTlWTFU5T1RVVTNWRms1V25OUmNUa3pURk41TFZCTVFrMDRjbEJqTVY5TllrNDNUREJXVkVsYVpIbHVjM1pHU214clZGaEhVa2xqVkd3MWJ6UjNVSEpVVVVGcWJUZGlSMHR5UVhGeGFGVnpRV1pzYlVscGMzQTVjbXg2VFVWVlZHdEtjV2RrTjJaT1QyRlIifSwiaW1hZ2UtcmVnaXN0cnkub3BlbnNoaWZ0LWltYWdlLXJlZ2lzdHJ5LnN2Yy5jbHVzdGVyLmxvY2FsOjUwMDAiOnsidXNlcm5hbWUiOiJzZXJ2aWNlYWNjb3VudCIsInBhc3N3b3JkIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklrcGhVWEZwUW5sU09FcEpRbXAxZWxSS04zaFJTV3hQWWtkemMyUnNWakZhWVhsMU9HWlpVMDR5ZDNjaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUpoWVhBaUxDSnJkV0psY201bGRHVnpMbWx2TDNObGNuWnBZMlZoWTJOdmRXNTBMM05sWTNKbGRDNXVZVzFsSWpvaVluVnBiR1JsY2kxMGIydGxiaTFpWkdZMGFpSXNJbXQxWW1WeWJtVjBaWE11YVc4dmMyVnlkbWxqWldGalkyOTFiblF2YzJWeWRtbGpaUzFoWTJOdmRXNTBMbTVoYldVaU9pSmlkV2xzWkdWeUlpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WlhKMmFXTmxMV0ZqWTI5MWJuUXVkV2xrSWpvaVlqQmxZMkZtTnpZdE0yVmxaUzAwTVRGaUxXSmlOV0V0WVRVME5HTXdObU5rWlRabElpd2ljM1ZpSWpvaWMzbHpkR1Z0T25ObGNuWnBZMlZoWTJOdmRXNTBPbUZoY0RwaWRXbHNaR1Z5SW4wLlhrQkRSUWEzWFRJQ2hYOEJQUENTTV9GazZvYXFxWVc0VlhzTUFoMXh6bVcxbnNzc2hYRUxJN3FXbnU4b0loV0JyTFRkWmJkNU9IWUFMZlFDZWEtQVlaeTM2eUVtUlo3LXZPTG1zMWpMeGhkNW5ETmhwRFQwVEJOc0V6Rm9QZDZ6cFVlRV9RbExoMEtuSVowRl8zQ2g4TGs1Tk5nbV8yQTBkYzE0RUdkS2ltY2ozMlcyTGxLQzNES05TU0M3UlVIbUZ4bmRJU2JQLUVzRzloLXRRNFlLVVdwS1g2eVAzTDJFR2J4VmJ5UEZRT2tkeGxZY0dIdXcyTDdEQWNaaV9iVFpJUnVLNmxtR0o2TnVSeVZNYVd3eHdwX09halZrQnFYZm9Ud1Y5bDB2N05QT2FVX0VjbzZHTzJTTVROQVMxdkhnNUwtcnptWV9SYlBuVmdwRE9Nemw3ejBhTzdfYTlNZDhGa0d6WWFmZnFqOU9QbW5mZ1Z3WS1ocDFaYjJPX0E2Q0IzN29XR3psZ3lKbzBJWjJCTmh1ckNOa203Rm5PUHdRUE9zN2VfQzFUZnlGQmNUYTNKcFVGay1WVUE3bl95dHVIZWdwZmdRcm9Yb3hsVE1zX2hGYmFfZjdJNHo3ZkJwM29jcHNwTzhVNFkwOHNYd3RubTBkamtQM2NkSC1nYmdQZXhHc2JyVnZlYS1wNHFqWXl2T3RXVFZDaXM3eWh5NVdqQ0lWQWFNTTRaY3RDOWJSSUdGVVcycVc2Ny1vVThnNm9VLU9OTUU3VFk5WnNRcTkzTFN5LVBMQk04clBjMV9NYk43TDBWVElaZHluc3ZGSmxrVFhHUkljVGw1bzR3UHJUUUFqbTdiR0tyQXFxaFVzQWZsbUlpc3A5cmx6TUVVVGtKcWdkN2ZOT2FRIiwiZW1haWwiOiJzZXJ2aWNlYWNjb3VudEBleGFtcGxlLm9yZyIsImF1dGgiOiJjMlZ5ZG1salpXRmpZMjkxYm5RNlpYbEthR0pIWTJsUGFVcFRWWHBKTVU1cFNYTkpiWFJ3V2tOSk5rbHJjR2hWV0Vad1VXNXNVMDlGY0VwUmJYQXhaV3hTUzA0emFGSlRWM2hRV1d0a2VtTXlVbk5XYWtaaFdWaHNNVTlIV2xwVk1EUjVaRE5qYVdaUkxtVjVTbkJqTTAxcFQybEtjbVJYU214amJUVnNaRWRXZWt3elRteGpibHB3V1RKV2FGa3lUblprVnpVd1NXbDNhV0V6Vm1sYVdFcDFXbGhTYkdONU5YQmllVGw2V2xoS01tRlhUbXhaVjA1cVlqTldkV1JET1hWWlZ6RnNZek5DYUZreVZXbFBhVXBvV1ZoQmFVeERTbkprVjBwc1kyMDFiR1JIVm5wTWJXeDJURE5PYkdOdVduQlpNbFpvV1RKT2RtUlhOVEJNTTA1c1dUTktiR1JETlhWWlZ6RnNTV3B2YVZsdVZuQmlSMUpzWTJreE1HSXlkR3hpYVRGcFdrZFpNR0ZwU1hOSmJYUXhXVzFXZVdKdFZqQmFXRTExWVZjNGRtTXlWbmxrYld4cVdsZEdhbGt5T1RGaWJsRjJZekpXZVdSdGJHcGFVekZvV1RKT2RtUlhOVEJNYlRWb1lsZFZhVTlwU21sa1YyeHpXa2RXZVVscGQybGhNMVpwV2xoS2RWcFlVbXhqZVRWd1luazVlbHBZU2pKaFYwNXNXVmRPYW1JelZuVmtRemw2V2xoS01tRlhUbXhNVjBacVdUSTVNV0p1VVhWa1YyeHJTV3B2YVZscVFteFpNa1p0VG5wWmRFMHlWbXhhVXpBd1RWUkdhVXhYU21sT1YwVjBXVlJWTUU1SFRYZE9iVTVyV2xSYWJFbHBkMmxqTTFacFNXcHZhV016Ykhwa1IxWjBUMjVPYkdOdVduQlpNbFpvV1RKT2RtUlhOVEJQYlVab1kwUndhV1JYYkhOYVIxWjVTVzR3TGxoclFrUlNVV0V6V0ZSSlEyaFlPRUpRVUVOVFRWOUdhelp2WVhGeFdWYzBWbGh6VFVGb01YaDZiVmN4Ym5OemMyaFlSVXhKTjNGWGJuVTRiMGxvVjBKeVRGUmtXbUprTlU5SVdVRk1abEZEWldFdFFWbGFlVE0yZVVWdFVsbzNMWFpQVEcxek1XcE1lR2hrTlc1RVRtaHdSRlF3VkVKT2MwVjZSbTlRWkRaNmNGVmxSVjlSYkV4b01FdHVTVm93Umw4elEyZzRUR3MxVGs1bmJWOHlRVEJrWXpFMFJVZGtTMmx0WTJvek1sY3lUR3hMUXpORVMwNVRVME0zVWxWSWJVWjRibVJKVTJKUUxVVnpSemxvTFhSUk5GbExWVmR3UzFnMmVWQXpUREpGUjJKNFZtSjVVRVpSVDJ0a2VHeFpZMGRJZFhjeVREZEVRV05hYVY5aVZGcEpVblZMTm14dFIwbzJUblZTZVZaTllWZDNlSGR3WDA5aGFsWnJRbkZZWm05VWQxWTViREIyTjA1UVQyRlZYMFZqYnpaSFR6SlRUVlJPUVZNeGRraG5OVXd0Y25wdFdWOVNZbEJ1Vm1kd1JFOU5lbXczZWpCaFR6ZGZZVGxOWkRoR2EwZDZXV0ZtWm5GcU9VOVFiVzVtWjFaM1dTMW9jREZhWWpKUFgwRTJRMEl6TjI5WFIzcHNaM2xLYnpCSldqSkNUbWgxY2tOT2EyMDNSbTVQVUhkUlVFOXpOMlZmUXpGVVpubEdRbU5VWVROS2NGVkdheTFXVlVFM2JsOTVkSFZJWldkd1ptZFJjbTlZYjNoc1ZFMXpYMmhHWW1GZlpqZEpOSG8zWmtKd00yOWpjSE53VHpoVk5Ga3dPSE5ZZDNSdWJUQmthbXRRTTJOa1NDMW5ZbWRRWlhoSGMySnlWblpsWVMxd05IRnFXWGwyVDNSWFZGWkRhWE0zZVdoNU5WZHFRMGxXUVdGTlRUUmFZM1JET1dKU1NVZEdWVmN5Y1ZjMk55MXZWVGhuTm05VkxVOU9UVVUzVkZrNVduTlJjVGt6VEZONUxWQk1RazA0Y2xCak1WOU5ZazQzVERCV1ZFbGFaSGx1YzNaR1NteHJWRmhIVWtsalZHdzFielIzVUhKVVVVRnFiVGRpUjB0eVFYRnhhRlZ6UVdac2JVbHBjM0E1Y214NlRVVlZWR3RLY1dka04yWk9UMkZSIn0sImltYWdlLXJlZ2lzdHJ5Lm9wZW5zaGlmdC1pbWFnZS1yZWdpc3RyeS5zdmM6NTAwMCI6eyJ1c2VybmFtZSI6InNlcnZpY2VhY2NvdW50IiwicGFzc3dvcmQiOiJleUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SWtwaFVYRnBRbmxTT0VwSlFtcDFlbFJLTjNoUlNXeFBZa2R6YzJSc1ZqRmFZWGwxT0daWlUwNHlkM2NpZlEuZXlKcGMzTWlPaUpyZFdKbGNtNWxkR1Z6TDNObGNuWnBZMlZoWTJOdmRXNTBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5dVlXMWxjM0JoWTJVaU9pSmhZWEFpTENKcmRXSmxjbTVsZEdWekxtbHZMM05sY25acFkyVmhZMk52ZFc1MEwzTmxZM0psZEM1dVlXMWxJam9pWW5WcGJHUmxjaTEwYjJ0bGJpMWlaR1kwYWlJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZ5ZG1salpTMWhZMk52ZFc1MExtNWhiV1VpT2lKaWRXbHNaR1Z5SWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXpaWEoyYVdObExXRmpZMjkxYm5RdWRXbGtJam9pWWpCbFkyRm1Oell0TTJWbFpTMDBNVEZpTFdKaU5XRXRZVFUwTkdNd05tTmtaVFpsSWl3aWMzVmlJam9pYzNsemRHVnRPbk5sY25acFkyVmhZMk52ZFc1ME9tRmhjRHBpZFdsc1pHVnlJbjAuWGtCRFJRYTNYVElDaFg4QlBQQ1NNX0ZrNm9hcXFZVzRWWHNNQWgxeHptVzFuc3NzaFhFTEk3cVdudThvSWhXQnJMVGRaYmQ1T0hZQUxmUUNlYS1BWVp5MzZ5RW1SWjctdk9MbXMxakx4aGQ1bkROaHBEVDBUQk5zRXpGb1BkNnpwVWVFX1FsTGgwS25JWjBGXzNDaDhMazVOTmdtXzJBMGRjMTRFR2RLaW1jajMyVzJMbEtDM0RLTlNTQzdSVUhtRnhuZElTYlAtRXNHOWgtdFE0WUtVV3BLWDZ5UDNMMkVHYnhWYnlQRlFPa2R4bFljR0h1dzJMN0RBY1ppX2JUWklSdUs2bG1HSjZOdVJ5Vk1hV3d4d3BfT2FqVmtCcVhmb1R3VjlsMHY3TlBPYVVfRWNvNkdPMlNNVE5BUzF2SGc1TC1yem1ZX1JiUG5WZ3BET016bDd6MGFPN19hOU1kOEZrR3pZYWZmcWo5T1BtbmZnVndZLWhwMVpiMk9fQTZDQjM3b1dHemxneUpvMElaMkJOaHVyQ05rbTdGbk9Qd1FQT3M3ZV9DMVRmeUZCY1RhM0pwVUZrLVZVQTduX3l0dUhlZ3BmZ1Fyb1hveGxUTXNfaEZiYV9mN0k0ejdmQnAzb2Nwc3BPOFU0WTA4c1h3dG5tMGRqa1AzY2RILWdiZ1BleEdzYnJWdmVhLXA0cWpZeXZPdFdUVkNpczd5aHk1V2pDSVZBYU1NNFpjdEM5YlJJR0ZVVzJxVzY3LW9VOGc2b1UtT05NRTdUWTlac1FxOTNMU3ktUExCTThyUGMxX01iTjdMMFZUSVpkeW5zdkZKbGtUWEdSSWNUbDVvNHdQclRRQWptN2JHS3JBcXFoVXNBZmxtSWlzcDlybHpNRVVUa0pxZ2Q3Zk5PYVEiLCJlbWFpbCI6InNlcnZpY2VhY2NvdW50QGV4YW1wbGUub3JnIiwiYXV0aCI6ImMyVnlkbWxqWldGalkyOTFiblE2WlhsS2FHSkhZMmxQYVVwVFZYcEpNVTVwU1hOSmJYUndXa05KTmtscmNHaFZXRVp3VVc1c1UwOUZjRXBSYlhBeFpXeFNTMDR6YUZKVFYzaFFXV3RrZW1NeVVuTldha1poV1Zoc01VOUhXbHBWTURSNVpETmphV1pSTG1WNVNuQmpNMDFwVDJsS2NtUlhTbXhqYlRWc1pFZFdla3d6VG14amJscHdXVEpXYUZreVRuWmtWelV3U1dsM2FXRXpWbWxhV0VwMVdsaFNiR041TlhCaWVUbDZXbGhLTW1GWFRteFpWMDVxWWpOV2RXUkRPWFZaVnpGc1l6TkNhRmt5VldsUGFVcG9XVmhCYVV4RFNuSmtWMHBzWTIwMWJHUkhWbnBNYld4MlRETk9iR051V25CWk1sWm9XVEpPZG1SWE5UQk1NMDVzV1ROS2JHUkROWFZaVnpGc1NXcHZhVmx1Vm5CaVIxSnNZMmt4TUdJeWRHeGlhVEZwV2tkWk1HRnBTWE5KYlhReFdXMVdlV0p0VmpCYVdFMTFZVmM0ZG1NeVZubGtiV3hxV2xkR2Fsa3lPVEZpYmxGMll6SldlV1J0YkdwYVV6Rm9XVEpPZG1SWE5UQk1iVFZvWWxkVmFVOXBTbWxrVjJ4eldrZFdlVWxwZDJsaE0xWnBXbGhLZFZwWVVteGplVFZ3WW5rNWVscFlTakpoVjA1c1dWZE9hbUl6Vm5Wa1F6bDZXbGhLTW1GWFRteE1WMFpxV1RJNU1XSnVVWFZrVjJ4clNXcHZhVmxxUW14Wk1rWnRUbnBaZEUweVZteGFVekF3VFZSR2FVeFhTbWxPVjBWMFdWUlZNRTVIVFhkT2JVNXJXbFJhYkVscGQybGpNMVpwU1dwdmFXTXpiSHBrUjFaMFQyNU9iR051V25CWk1sWm9XVEpPZG1SWE5UQlBiVVpvWTBSd2FXUlhiSE5hUjFaNVNXNHdMbGhyUWtSU1VXRXpXRlJKUTJoWU9FSlFVRU5UVFY5R2F6WnZZWEZ4V1ZjMFZsaHpUVUZvTVhoNmJWY3hibk56YzJoWVJVeEpOM0ZYYm5VNGIwbG9WMEp5VEZSa1dtSmtOVTlJV1VGTVpsRkRaV0V0UVZsYWVUTTJlVVZ0VWxvM0xYWlBURzF6TVdwTWVHaGtOVzVFVG1od1JGUXdWRUpPYzBWNlJtOVFaRFo2Y0ZWbFJWOVJiRXhvTUV0dVNWb3dSbDh6UTJnNFRHczFUazVuYlY4eVFUQmtZekUwUlVka1MybHRZMm96TWxjeVRHeExRek5FUzA1VFUwTTNVbFZJYlVaNGJtUkpVMkpRTFVWelJ6bG9MWFJSTkZsTFZWZHdTMWcyZVZBelRESkZSMko0Vm1KNVVFWlJUMnRrZUd4WlkwZElkWGN5VERkRVFXTmFhVjlpVkZwSlVuVkxObXh0UjBvMlRuVlNlVlpOWVZkM2VIZHdYMDloYWxaclFuRllabTlVZDFZNWJEQjJOMDVRVDJGVlgwVmpielpIVHpKVFRWUk9RVk14ZGtobk5Vd3RjbnB0V1Y5U1lsQnVWbWR3UkU5TmVtdzNlakJoVHpkZllUbE5aRGhHYTBkNldXRm1abkZxT1U5UWJXNW1aMVozV1Mxb2NERmFZakpQWDBFMlEwSXpOMjlYUjNwc1ozbEtiekJKV2pKQ1RtaDFja05PYTIwM1JtNVBVSGRSVUU5ek4yVmZRekZVWm5sR1FtTlVZVE5LY0ZWR2F5MVdWVUUzYmw5NWRIVklaV2R3Wm1kUmNtOVliM2hzVkUxelgyaEdZbUZmWmpkSk5IbzNaa0p3TTI5amNITndUemhWTkZrd09ITllkM1J1YlRCa2FtdFFNMk5rU0MxblltZFFaWGhIYzJKeVZuWmxZUzF3TkhGcVdYbDJUM1JYVkZaRGFYTTNlV2g1TlZkcVEwbFdRV0ZOVFRSYVkzUkRPV0pTU1VkR1ZWY3ljVmMyTnkxdlZUaG5ObTlWTFU5T1RVVTNWRms1V25OUmNUa3pURk41TFZCTVFrMDRjbEJqTVY5TllrNDNUREJXVkVsYVpIbHVjM1pHU214clZGaEhVa2xqVkd3MWJ6UjNVSEpVVVVGcWJUZGlSMHR5UVhGeGFGVnpRV1pzYlVscGMzQTVjbXg2VFVWVlZHdEtjV2RrTjJaT1QyRlIifX0=
kind: Secret
metadata:
    name: builder-dockercfg-t7nmf
    namespace: ansible-prod-axa-es
type: kubernetes.io/dockercfg
