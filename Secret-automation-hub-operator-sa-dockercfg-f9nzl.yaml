apiVersion: v1
data:
    .dockercfg: 
kind: Secret
metadata:
    name: automation-hub-operator-sa-dockercfg-f9nzl
    namespace: ansible-prod-axa-es
type: kubernetes.io/dockercfg
